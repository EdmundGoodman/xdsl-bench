{
    "end_to_end.time_end_to_end_opt__constant_folding": {
        "code": "def time_end_to_end_opt__constant_folding() -> None:\n    \"\"\"Time running a constant folding example.\"\"\"\n    runner = xDSLOptMain(args=[\n        str(BENCHMARKS_DIR.parent / MLIR_FILES[\"constant_folding\"]),\n        \"-p\", \"constant-fold-interp\"\n    ])\n    runner.run()",
        "min_run_count": 2,
        "name": "end_to_end.time_end_to_end_opt__constant_folding",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "457a4e87912a503f87a5c00585a010376ecaa4597ae6d3daa60fb33618972ece",
        "warmup_time": -1
    },
    "end_to_end.time_end_to_end_opt__empty_program": {
        "code": "def time_end_to_end_opt__empty_program() -> None:\n    \"\"\"Time running the empty program.\"\"\"\n    runner = xDSLOptMain(args=[\n        str(BENCHMARKS_DIR.parent / MLIR_FILES[\"empty_program\"]),\n        \"-p\", \"constant-fold-interp\"\n    ])\n    runner.run()",
        "min_run_count": 2,
        "name": "end_to_end.time_end_to_end_opt__empty_program",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cf67b8825774b1d3587cfbcfa73424048e3fce81767fb9f136d5129d942a7045",
        "warmup_time": -1
    },
    "import_classes.time_import_xdsl_opt": {
        "code": "def time_import_xdsl_opt() -> None:\n    \"\"\"Import benchmark using the default asv mechanism.\"\"\"\n    from xdsl.xdsl_opt_main import xDSLOptMain  # noqa: F401",
        "min_run_count": 2,
        "name": "import_classes.time_import_xdsl_opt",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e948dee75d0486bf89e4849a54e857174be79def1d686db071d3ae2869ff9474",
        "warmup_time": -1
    },
    "import_classes.timeraw_import_xdsl_opt": {
        "code": "def timeraw_import_xdsl_opt() -> str:\n    \"\"\"Import benchmark using the `raw` asv mechanism.\"\"\"\n    return \"\"\"\n    from xdsl.xdsl_opt_main import xDSLOptMain\n    \"\"\"",
        "min_run_count": 2,
        "name": "import_classes.timeraw_import_xdsl_opt",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c74213327293254fbfe478e3d38f19ac81bf08f04240970515da4909323ed35f",
        "warmup_time": -1
    },
    "lexer.time_lexer__all": {
        "code": "def time_lexer__all() -> None:\n    \"\"\"Time lexing all `.mlir` files in xDSL's `tests/` directory .\"\"\"\n    mlir_files = RAW_TEST_MLIR_DIR.iterdir()\n    for mlir_file in mlir_files:\n        lex_file(Path(mlir_file))",
        "min_run_count": 2,
        "name": "lexer.time_lexer__all",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c8ce72f20dd4b75fed7f9bcc591a06aacfc7a9f2ae6f4218735b0e6d0b13add1",
        "warmup_time": -1
    },
    "lexer.time_lexer__apply_pdl_extra_file": {
        "code": "def time_lexer__apply_pdl_extra_file() -> None:\n    \"\"\"Time lexing the `apply_pdl_extra_file.mlir` file.\"\"\"\n    lex_file(MLIR_FILES[\"apply_pdl_extra_file\"])",
        "min_run_count": 2,
        "name": "lexer.time_lexer__apply_pdl_extra_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e07ccf9f325b678ee6a8278851988be2118a82540cda75097fd94dd254d0d777",
        "warmup_time": -1
    },
    "lexer.time_lexer__rvscf_lowering_emu": {
        "code": "def time_lexer__rvscf_lowering_emu() -> None:\n    \"\"\"Time lexing the `rvscf_lowering_emu.mlir` file.\"\"\"\n    lex_file(MLIR_FILES[\"rvscf_lowering_emu\"])",
        "min_run_count": 2,
        "name": "lexer.time_lexer__rvscf_lowering_emu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fba01c887042da86aedc2c89b30ab47fd422c32509fa0daa282bbaa776a8c1c0",
        "warmup_time": -1
    },
    "parser.time_parser__add": {
        "code": "def time_parser__add() -> None:\n    \"\"\"Time parsing the `add.mlir` file.\"\"\"\n    parse_file(MLIR_FILES[\"add\"])",
        "min_run_count": 2,
        "name": "parser.time_parser__add",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "80b9c9fab70d361c15a5547ab978baef45dd5023c2021743b4572cf8f312933b",
        "warmup_time": -1
    },
    "parser.time_parser__all": {
        "code": "def time_parser__all() -> None:\n    \"\"\"Time parsing all `.mlir` files in xDSL's `tests/` directory .\"\"\"\n    mlir_files = GENERIC_TEST_MLIR_DIR.iterdir()\n    for mlir_file in mlir_files:\n        parse_file(Path(mlir_file))",
        "min_run_count": 2,
        "name": "parser.time_parser__all",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a7b7661899c51e0cd6ff451a92366987c5a8be8517be483c20733bce403f4e24",
        "warmup_time": -1
    },
    "parser.time_parser__apply_pdl_extra_file": {
        "code": "def time_parser__apply_pdl_extra_file() -> None:\n    \"\"\"Time parsing the `apply_pdl_extra_file.mlir` file.\"\"\"\n    parse_file(MLIR_FILES[\"apply_pdl_extra_file\"])",
        "min_run_count": 2,
        "name": "parser.time_parser__apply_pdl_extra_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "6aff66b5df7d3b48425bfc21743b588505a457754d1fb13175cd6b2d6d966bee",
        "warmup_time": -1
    },
    "version": 2
}